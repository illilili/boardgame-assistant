# model_train.py

import pandas as pd
import numpy as np
import os
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
import joblib

# ­ЪћД ьїїВЮ╝ Ж▓йвАю
csv_path = 'data/boardgame_detaildata_1-101_Ж│хв░▒.csv'

# РюЁ вЇ░ВЮ┤ьё░ вАювЊю в░Ј ВаёВ▓ўвдг
df = pd.read_csv(csv_path)
df['amazon_price'] = df['amazon_price'].replace(r'[\$,]', '', regex=True)
df['amazon_price'] = pd.to_numeric(df['amazon_price'], errors='coerce')
df['ВхюВєївѓўВЮ┤'] = df['ВхюВєївѓўВЮ┤'].str.replace('+', '', regex=False)
df['ВхюВєївѓўВЮ┤'] = pd.to_numeric(df['ВхюВєївѓўВЮ┤'], errors='coerce')
df['вѓюВЮ┤вЈё'] = pd.to_numeric(df['вѓюВЮ┤вЈё'], errors='coerce')

# РюЁ Ж▓░ВИАВ╣ў ВаюЖ▒░ в░Ј ВЮ┤ВЃЂВ╣ў(>200вІгвЪг) ВаюЖ▒░
df = df.dropna(subset=['amazon_price', 'В╣┤ьЁїЖ│авдг', 'ВхюВєївѓўВЮ┤', 'вѓюВЮ┤вЈё'])
df = df[df['amazon_price'] <= 200].copy()

# РюЁ В╣┤ьЁїЖ│авдг вдгВіцьіИьЎћ
def parse_category(x):
    try:
        return eval(x) if isinstance(x, str) and x.startswith("[") else []
    except:
        return []

df['В╣┤ьЁїЖ│авдг_вдгВіцьіИ'] = df['В╣┤ьЁїЖ│авдг'].apply(parse_category)

# РюЁ В╣┤ьЁїЖ│авдгв│ё ьЈЅЖиа Ж░ђЖ▓Е Ж│ёВѓ░ (ВЌгвЪг В╣┤ьЁїЖ│авдгВЌљ вфевЉљ в░ўВўЂ)
category_price = {}
category_count = {}

for _, row in df.iterrows():
    price = row['amazon_price']
    categories = row['В╣┤ьЁїЖ│авдг_вдгВіцьіИ']
    for cat in categories:
        category_price[cat] = category_price.get(cat, 0) + price
        category_count[cat] = category_count.get(cat, 0) + 1

category_avg = {cat: category_price[cat] / category_count[cat] for cat in category_price}
category_avg_df = pd.DataFrame({'category': list(category_avg.keys()), 'avg_price': list(category_avg.values())})
os.makedirs('models', exist_ok=True)
category_avg_df.to_csv('models/category_avg_prices.csv', index=False)

# РюЁ ВъЁваЦВџЕ feature ЖхгВё▒
def compute_category_mean(row):
    cats = row['В╣┤ьЁїЖ│авдг_вдгВіцьіИ']
    prices = [category_avg[cat] for cat in cats if cat in category_avg]
    return np.mean(prices) if prices else np.nan

df['В╣┤ьЁїЖ│авдг_ьЈЅЖиаЖ░ђЖ▓Е'] = df.apply(compute_category_mean, axis=1)
df = df.dropna(subset=['В╣┤ьЁїЖ│авдг_ьЈЅЖиаЖ░ђЖ▓Е'])

X = df[['В╣┤ьЁїЖ│авдг_ьЈЅЖиаЖ░ђЖ▓Е', 'ВхюВєївѓўВЮ┤', 'вѓюВЮ┤вЈё']]
y = df['amazon_price']

# РюЁ ьЋЎВіх/Ж▓ђВдЮ вХёвдг
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# РюЁ вфевЇИ ьЋЎВіх
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# РюЁ Вё▒віЦ ьЈЅЖ░ђ
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("РюЁ вфевЇИ ьЋЎВіх ВЎёвБї")
print(f"­ЪЊі ьЈЅЖиа Ваѕвїђ ВўцВ░е (MAE): ${mae:.2f}")
print(f"­ЪЊѕ Ж▓░ВаЋЖ│ёВѕў (R┬▓ Score): {r2:.3f}")

# РюЁ вфевЇИ ВађВъЦ
os.makedirs('models', exist_ok=True)
joblib.dump(model, 'models/price_predictor.pkl')
joblib.dump(category_avg, 'models/category_avg_dict.pkl')

print("­ЪњЙ вфевЇИ в░Ј В╣┤ьЁїЖ│авдг ьЈЅЖиа ВађВъЦ ВЎёвБї")
