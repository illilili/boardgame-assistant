// Translation.jsx Îã§Íµ≠Ïñ¥ Î≤àÏó≠ Í¥ÄÎ¶¨
import { useNavigate } from 'react-router-dom';
import './Translation.css';
import { requestTranslations, getTranslationsByContent, completeTranslation, getContentsByProject } from '../api/publish';
import React, { useEffect, useMemo, useState } from 'react';
import { getMyProjects, getApprovedPlan } from '../api/auth';

const LANGS = [
	{ code: 'en', name: 'ÏòÅÏñ¥', flag: 'üá∫üá∏' },
	{ code: 'ja', name: 'ÏùºÎ≥∏Ïñ¥', flag: 'üáØüáµ' },
	{ code: 'zh', name: 'Ï§ëÍµ≠Ïñ¥', flag: 'üá®üá≥' },
	{ code: 'de', name: 'ÎèÖÏùºÏñ¥', flag: 'üá©üá™' },
	{ code: 'fr', name: 'ÌîÑÎûëÏä§Ïñ¥', flag: 'üá´üá∑' },
	{ code: 'es', name: 'Ïä§ÌéòÏù∏Ïñ¥', flag: 'üá™üá∏' },
];

function Translation() {
  const navigate = useNavigate();
  const [projects, setProjects] = useState([]);
  const [selectedProjectId, setSelectedProjectId] = useState('');
  const [contents, setContents] = useState([]);
  const [selectedContentId, setSelectedContentId] = useState(null);
  const [translationResults, setTranslationResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [expandedContentId, setExpandedContentId] = useState(null);
  const [pending, setPending] = useState(false);
  
  // Review modal state
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalLang, setModalLang] = useState(null);
  const [modalText, setModalText] = useState('');
  const [modalOriginalText, setModalOriginalText] = useState(''); // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
  const [modalFeedback, setModalFeedback] = useState('');
  const [modalTranslationId, setModalTranslationId] = useState(null);

  // ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const projectData = await getMyProjects();
        setProjects(projectData);
        if (projectData.length > 0) {
          setSelectedProjectId(projectData[0].projectId);
        }
      } catch (err) {
        setError('ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    };
    fetchProjects();
  }, []);

  // ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù Ïãú ÏΩòÌÖêÏ∏† Î™©Î°ù Î°úÎìú
  useEffect(() => {
    if (!selectedProjectId) return;
    
    setExpandedContentId(null);
    setSelectedContentId(null);
    setTranslationResults([]);
    
    const fetchContents = async () => {
      setIsLoading(true);
      setError(null);
      try {
        // Î≤àÏó≠ ÌõÑÎ≥¥ Î™©Î°ù Ï°∞Ìöå API ÏÇ¨Ïö©
        const response = await fetch(`/api/translate/candidates?projectId=${selectedProjectId}`);
        if (!response.ok) {
          throw new Error('Î≤àÏó≠ ÌõÑÎ≥¥ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
        
        const contentList = await response.json();
        console.log('Î≤àÏó≠ ÌõÑÎ≥¥ Î™©Î°ù:', contentList);
        
        const mapped = (contentList || []).map(item => ({
          contentId: item.contentId,
          name: item.name,
          type: item.componentType || 'ÏΩòÌÖêÏ∏†',
          description: `ÏÉÅÌÉú: ${item.status}`,
          status: 'Î≤àÏó≠ ÎåÄÍ∏∞' // Í∏∞Î≥∏ ÏÉÅÌÉú
        }));
        
        console.log('Îß§ÌïëÎêú ÏΩòÌÖêÏ∏†:', mapped);
        setContents(mapped);
      } catch (error) {
        console.error('ÏΩòÌÖêÏ∏† Î°úÎìú Ïã§Ìå®:', error);
        setError('Î≤àÏó≠Ìï† ÏΩòÌÖêÏ∏†Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        // ÏûÑÏãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
        setContents([
          { contentId: 'content1', name: 'ÎßàÎ≤ï Ïπ¥Îìú', type: 'card', description: 'Í∞ïÎ†•Ìïú ÎßàÎ≤ï Ìö®Í≥º', status: 'Î≤àÏó≠ ÎåÄÍ∏∞' },
          { contentId: 'content2', name: 'Î™¨Ïä§ÌÑ∞ Ïπ¥Îìú', type: 'card', description: 'ÏúÑÌóòÌïú Î™¨Ïä§ÌÑ∞', status: 'Î≤àÏó≠ Ï§ë' },
          { contentId: 'content3', name: 'Î£∞Î∂Å', type: 'rulebook', description: 'Í≤åÏûÑ Í∑úÏπôÏÑú', status: 'Î≤àÏó≠ ÏôÑÎ£å' }
        ]);
      } finally {
        setIsLoading(false);
      }
    };
    fetchContents();
  }, [selectedProjectId]);

  // ÏΩòÌÖêÏ∏† ÏÑ†ÌÉù Ïãú Î≤àÏó≠ Í≤∞Í≥º Ï°∞Ìöå Î∞è ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (!selectedContentId) {
      setTranslationResults([]);
      return;
    }

    const fetchTranslationData = async () => {
      try {
        // Î≤àÏó≠ Í≤∞Í≥º Ï°∞Ìöå (Ïñ∏Ïñ¥Î≥Ñ ÏµúÏã† 1Í±¥)
        const resultsResponse = await fetch(`/api/translate/${selectedContentId}?latestOnly=true`);
        if (resultsResponse.ok) {
          const results = await resultsResponse.json();
          setTranslationResults(results);
          
          // ÌòÑÏû¨ ÏΩòÌÖêÏ∏†Ïùò Î≤àÏó≠ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          const status = calculateTranslationStatus(results);
          setContentTranslationStatuses(prev => ({
            ...prev,
            [selectedContentId]: status
          }));
        }
      } catch (error) {
        console.error('Î≤àÏó≠ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      }
    };

    fetchTranslationData();
  }, [selectedContentId]);

  // Î≤àÏó≠ ÏöîÏ≤≠ Ìï®Ïàò
  const requestTranslation = async (contentId, targetLanguages, feedback = null) => {
    try {
      setPending(true);
      const payload = {
        contentId: contentId,
        targetLanguages: targetLanguages
      };
      
      if (feedback && feedback.trim()) {
        payload.feedback = feedback.trim();
      }

      const response = await fetch('/api/translate/request', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error('Î≤àÏó≠ ÏöîÏ≤≠Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const result = await response.json();
      
      // Î≤àÏó≠ Í≤∞Í≥º Î™©Î°ù Í∞±Ïã†
      const resultsResponse = await fetch(`/api/translate/${contentId}?latestOnly=true`);
      if (resultsResponse.ok) {
        const results = await resultsResponse.json();
        setTranslationResults(results);
        
        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const status = calculateTranslationStatus(results);
        setContentTranslationStatuses(prev => ({
          ...prev,
          [contentId]: status
        }));
      }

      const langNames = targetLanguages.map(code => LANGS.find(l => l.code === code)?.name || code).join(', ');
      alert(`${langNames} Î≤àÏó≠Ïù¥ ÏöîÏ≤≠ÎêòÏóàÏäµÎãàÎã§.`);
      
      return result;
    } catch (error) {
      console.error('Î≤àÏó≠ ÏöîÏ≤≠ Ïò§Î•ò:', error);
      alert(error.message || 'Î≤àÏó≠ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      throw error;
    } finally {
      setPending(false);
    }
  };

  // Î≤àÏó≠ ÏôÑÎ£å Ï≤òÎ¶¨ ÌõÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  const markComplete = async (translationId) => {
    try {
      const response = await fetch(`/api/translate/${translationId}/complete`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error('Î≤àÏó≠ ÏôÑÎ£åÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // Î≤àÏó≠ Í≤∞Í≥º Î™©Î°ù Í∞±Ïã†
      if (selectedContentId) {
        const resultsResponse = await fetch(`/api/translate/${selectedContentId}?latestOnly=true`);
        if (resultsResponse.ok) {
          const results = await resultsResponse.json();
          setTranslationResults(results);
          
          // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          const status = calculateTranslationStatus(results);
          setContentTranslationStatuses(prev => ({
            ...prev,
            [selectedContentId]: status
          }));
        }
      }

      alert('Î≤àÏó≠Ïù¥ ÏôÑÎ£åÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Î≤àÏó≠ ÏôÑÎ£å Ïò§Î•ò:', error);
      alert(error.message || 'Î≤àÏó≠ ÏôÑÎ£å Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Î≤àÏó≠ ÏôÑÎ£å Ï≤òÎ¶¨ (Î™®Îã¨ÏóêÏÑú)
  const markCompleteFromModal = async () => {
    if (!modalTranslationId) return;
    
    try {
      await markComplete(modalTranslationId);
      closeReviewModal(); // Î™®Îã¨ Îã´Í∏∞
    } catch (error) {
      console.error('Î™®Îã¨ÏóêÏÑú Î≤àÏó≠ ÏôÑÎ£å Ïò§Î•ò:', error);
    }
  };

  // Î≤àÏó≠ Í≤ÄÌÜ† Î™®Îã¨ Ïó¥Í∏∞
  const openReviewModal = async (translationItem) => {
    setIsModalOpen(true);
    setModalLang(translationItem.targetLanguage);
    setModalTranslationId(translationItem.translationId);
    
    try {
      // Î≤àÏó≠Îêú ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï
      if (translationItem.translatedData) {
        const parsed = JSON.parse(translationItem.translatedData);
        setModalText(parsed?.text || String(translationItem.translatedData));
      } else {
        setModalText('');
      }
      
      // ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Ï°∞Ìöå APIÎ•º ÌÜµÌï¥ ÏõêÎ≥∏ ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Í∏∞
      if (selectedContentId) {
        const contentResponse = await fetch(`/api/content/${selectedContentId}`);
        if (contentResponse.ok) {
          const contentDetail = await contentResponse.json();
          console.log('ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Ï†ïÎ≥¥:', contentDetail);
          console.log('ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌÇ§Îì§:', Object.keys(contentDetail));
          console.log('ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞íÎì§:', Object.entries(contentDetail).map(([key, value]) => `${key}: ${typeof value} = ${JSON.stringify(value)}`));
          
          // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï (Ïã§Ï†ú ÏùëÎãµ Íµ¨Ï°∞Ïóê Îî∞Îùº Ï°∞Ï†ï ÌïÑÏöî)
          let originalText = '';
          
          // Ïö∞ÏÑ†ÏàúÏúÑÏóê Îî∞Îùº ÌïÑÎìú ÌôïÏù∏
          const priorityFields = [
            'contentData','content', 'text', 'description', 'effect', 'rule', 'detail', 'name'
          ];
          
          // Ïö∞ÏÑ†ÏàúÏúÑ ÌïÑÎìúÏóêÏÑú Î¨∏ÏûêÏó¥ Í∞í Ï∞æÍ∏∞
          for (const field of priorityFields) {
            if (contentDetail[field]) {
              const value = contentDetail[field];
              if (typeof value === 'string' && value.trim().length > 0) {
                originalText = value.trim();
                break;
              } else if (typeof value === 'object' && value !== null) {
                // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ JSON.stringifyÎ°ú Î≥ÄÌôò
                originalText = JSON.stringify(value, null, 2);
                break;
              }
            }
          }
          
          // Ïö∞ÏÑ†ÏàúÏúÑ ÌïÑÎìúÏóêÏÑú Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞, Î™®Îì† Î¨∏ÏûêÏó¥ ÌïÑÎìú Í≤ÄÏÉâ
          if (!originalText) {
            const stringFields = Object.entries(contentDetail)
              .filter(([key, value]) => typeof value === 'string' && value.trim().length > 0)
              .map(([key, value]) => `${key}: ${value.trim()}`)
              .join('\n');
            
            if (stringFields) {
              originalText = stringFields;
            }
          }
          
          // Ïó¨Ï†ÑÌûà Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞, Î™®Îì† ÌïÑÎìúÎ•º ÌëúÏãú
          if (!originalText) {
            const allFields = Object.entries(contentDetail)
              .map(([key, value]) => {
                if (typeof value === 'object' && value !== null) {
                  return `${key}: ${JSON.stringify(value, null, 2)}`;
                } else {
                  return `${key}: ${value}`;
                }
              })
              .join('\n');
            
            originalText = allFields || 'ÏõêÎ≥∏ ÎÇ¥Ïö©ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.';
          }
          
          console.log('ÏµúÏ¢Ö Ï∂îÏ∂úÎêú ÏõêÎ≥∏ ÌÖçÏä§Ìä∏:', originalText);
          setModalOriginalText(originalText);
        } else {
          console.error('ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Ï°∞Ìöå Ïã§Ìå®:', contentResponse.status);
          setModalOriginalText('ÏõêÎ≥∏ ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        }
      } else {
        setModalOriginalText('ÏΩòÌÖêÏ∏† IDÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Î™®Îã¨ Ïó¥Í∏∞ Ïò§Î•ò:', error);
      setModalText(String(translationItem.translatedData || ''));
      setModalOriginalText('ÏõêÎ≥∏ ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  };

  const closeReviewModal = () => {
    setIsModalOpen(false);
    setModalLang(null);
    setModalText('');
    setModalOriginalText(''); // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
    setModalFeedback('');
    setModalTranslationId(null);
  };

  // Î≤àÏó≠ Ïû¨ÏÉùÏÑ± (ÌîºÎìúÎ∞± Ìè¨Ìï®)
  const regenerateTranslation = async () => {
    if (!selectedContentId || !modalLang) return;
    
    try {
      setPending(true);
      await requestTranslation(selectedContentId, [modalLang], modalFeedback);
      
      // Î≤àÏó≠ Í≤∞Í≥º Î™©Î°ù Í∞±Ïã†
      const resultsResponse = await fetch(`/api/translate/${selectedContentId}?latestOnly=true`);
      if (resultsResponse.ok) {
        const results = await resultsResponse.json();
        setTranslationResults(results);
        
        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const status = calculateTranslationStatus(results);
        setContentTranslationStatuses(prev => ({
          ...prev,
          [selectedContentId]: status
        }));
        
        // Î™®Îã¨ ÌÖçÏä§Ìä∏ Í∞±Ïã†
        const updatedItem = results.find(item => item.targetLanguage === modalLang);
        if (updatedItem?.translatedData) {
          try {
            const parsed = JSON.parse(updatedItem.translatedData);
            setModalText(parsed?.text || '');
          } catch (error) {
            setModalText(String(updatedItem.translatedData));
          }
        }
        
        // ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ÎèÑ Îã§Ïãú Í∞ÄÏ†∏Ïò§Í∏∞
        const contentResponse = await fetch(`/api/content/${selectedContentId}`);
        if (contentResponse.ok) {
          const contentDetail = await contentResponse.json();
          let originalText = '';
          
          // Ïö∞ÏÑ†ÏàúÏúÑÏóê Îî∞Îùº ÌïÑÎìú ÌôïÏù∏
          const priorityFields = [
            'content', 'text', 'description', 'effect', 'rule', 'detail', 'name'
          ];
          
          // Ïö∞ÏÑ†ÏàúÏúÑ ÌïÑÎìúÏóêÏÑú Î¨∏ÏûêÏó¥ Í∞í Ï∞æÍ∏∞
          for (const field of priorityFields) {
            if (contentDetail[field]) {
              const value = contentDetail[field];
              if (typeof value === 'string' && value.trim().length > 0) {
                originalText = value.trim();
                break;
              } else if (typeof value === 'object' && value !== null) {
                // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ JSON.stringifyÎ°ú Î≥ÄÌôò
                originalText = JSON.stringify(value, null, 2);
                break;
              }
            }
          }
          
          // Ïö∞ÏÑ†ÏàúÏúÑ ÌïÑÎìúÏóêÏÑú Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞, Î™®Îì† Î¨∏ÏûêÏó¥ ÌïÑÎìú Í≤ÄÏÉâ
          if (!originalText) {
            const stringFields = Object.entries(contentDetail)
              .filter(([key, value]) => typeof value === 'string' && value.trim().length > 0)
              .map(([key, value]) => `${key}: ${value.trim()}`)
              .join('\n');
            
            if (stringFields) {
              originalText = stringFields;
            }
          }
          
          // Ïó¨Ï†ÑÌûà Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞, Î™®Îì† ÌïÑÎìúÎ•º ÌëúÏãú
          if (!originalText) {
            const allFields = Object.entries(contentDetail)
              .map(([key, value]) => {
                if (typeof value === 'object' && value !== null) {
                  return `${key}: ${JSON.stringify(value, null, 2)}`;
                } else {
                  return `${key}: ${value}`;
                }
              })
              .join('\n');
            
            originalText = allFields || 'ÏõêÎ≥∏ ÎÇ¥Ïö©ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.';
          }
          
          setModalOriginalText(originalText);
        }
      }
      
      alert('Î≤àÏó≠Ïù¥ Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Î≤àÏó≠ Ïû¨ÏÉùÏÑ± Ïò§Î•ò:', error);
      alert('Î≤àÏó≠ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setPending(false);
    }
  };

  // ÏΩòÌÖêÏ∏† Î≤àÏó≠ Ìå®ÎÑê ÌÜ†Í∏Ä
  const toggleTranslationPanel = (contentId) => {
    if (expandedContentId === contentId) {
      setExpandedContentId(null);
      setSelectedContentId(null);
    } else {
      setExpandedContentId(contentId);
      setSelectedContentId(contentId);
    }
  };

  // Î≤àÏó≠ ÏÉÅÌÉúÏóê Îî∞Î•∏ ÌÅ¥ÎûòÏä§ Î∞òÌôò
  const getTranslationStatusClass = (status) => {
    switch(status) {
      case 'PENDING': return 'pending';
      case 'REQUESTED': return 'requested';
      case 'IN_PROGRESS': return 'in-progress';
      case 'COMPLETED': return 'completed';
      default: return 'pending';
    }
  };

  // Î≤àÏó≠ ÏÉÅÌÉú ÌÖçÏä§Ìä∏ Î∞òÌôò
  const getStatusText = (status) => {
    switch(status) {
      case 'PENDING': return 'ÎåÄÍ∏∞';
      case 'REQUESTED': return 'ÏöîÏ≤≠Îê®';
      case 'IN_PROGRESS': return 'ÏßÑÌñâÏ§ë';
      case 'COMPLETED': return 'ÏôÑÎ£å';
      default: return 'ÎåÄÍ∏∞';
    }
  };

  // ÌäπÏ†ï Ïñ∏Ïñ¥Ïùò Î≤àÏó≠ ÏÉÅÌÉú ÌôïÏù∏
  const getTranslationStatus = (languageCode) => {
    const translation = translationResults.find(item => item.targetLanguage === languageCode);
    return translation ? translation.status : null;
  };

  // ÌäπÏ†ï Ïñ∏Ïñ¥Ïùò Î≤àÏó≠ ÏïÑÏù¥ÌÖú Î∞òÌôò
  const getTranslationItem = (languageCode) => {
    return translationResults.find(item => item.targetLanguage === languageCode);
  };

  // Î≤àÏó≠ ÏÉÅÌÉú Í≥ÑÏÇ∞ Ìï®Ïàò
  const calculateTranslationStatus = (results) => {
    if (!results || results.length === 0) {
      return 'Î≤àÏó≠ ÎåÄÍ∏∞';
    }
    
    const hasCompleted = results.some(item => item.status === 'COMPLETED');
    const hasInProgress = results.some(item => item.status === 'IN_PROGRESS');
    
    if (hasCompleted) {
      return 'Î≤àÏó≠ ÏôÑÎ£å';
    } else if (hasInProgress) {
      return 'Î≤àÏó≠ Ï§ë';
    } else {
      return 'Î≤àÏó≠ ÎåÄÍ∏∞';
    }
  };

  // ÏΩòÌÖêÏ∏†Ïùò Ï†ÑÏ≤¥ Î≤àÏó≠ ÏÉÅÌÉú ÌôïÏù∏ (ÌïòÎÇòÎùºÎèÑ ÏôÑÎ£åÎ©¥ ÏôÑÎ£å)
  const getContentTranslationStatus = (contentId) => {
    // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏΩòÌÖêÏ∏†Í∞Ä ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ ÏÉÅÌÉú Î∞òÌôò
    if (contentId !== selectedContentId) {
      return 'Î≤àÏó≠ ÎåÄÍ∏∞';
    }
    
    if (!translationResults || translationResults.length === 0) {
      return 'Î≤àÏó≠ ÎåÄÍ∏∞';
    }
    
    const hasCompleted = translationResults.some(item => item.status === 'COMPLETED');
    const hasInProgress = translationResults.some(item => item.status === 'IN_PROGRESS');
    
    if (hasCompleted) {
      return 'Î≤àÏó≠ ÏôÑÎ£å';
    } else if (hasInProgress) {
      return 'Î≤àÏó≠ Ï§ë';
    } else {
      return 'Î≤àÏó≠ ÎåÄÍ∏∞';
    }
  };

  // Î™®Îì† ÏΩòÌÖêÏ∏†Ïùò Î≤àÏó≠ ÏÉÅÌÉúÎ•º Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨
  const [contentTranslationStatuses, setContentTranslationStatuses] = useState({});

  // ÌîÑÎ°úÏ†ùÌä∏ Î≤àÏó≠ ÏôÑÎ£å Ï≤òÎ¶¨
  const completeProjectTranslation = async () => {
    if (!selectedProjectId) return;
    
    try {
      setPending(true);
      
      // ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Ïùò Î™®Îì† Î≤àÏó≠ Í≤∞Í≥ºÏóêÏÑú ÏôÑÎ£åÎêòÏßÄ ÏïäÏùÄ Ìï≠Î™©Îì§ÏùÑ ÏôÑÎ£å Ï≤òÎ¶¨
      const incompleteTranslations = translationResults.filter(item => item.status !== 'COMPLETED');
      
      if (incompleteTranslations.length === 0) {
        alert('Ïù¥ÎØ∏ Î™®Îì† Î≤àÏó≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
        return;
      }
      
      // Î™®Îì† ÎØ∏ÏôÑÎ£å Î≤àÏó≠ÏùÑ ÏôÑÎ£å Ï≤òÎ¶¨
      const completionPromises = incompleteTranslations.map(translation => 
        fetch(`/api/translate/${translation.translationId}/complete`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          }
        })
      );
      
      await Promise.all(completionPromises);
      
      // Î≤àÏó≠ Í≤∞Í≥º Î™©Î°ù Í∞±Ïã†
      if (selectedContentId) {
        const resultsResponse = await fetch(`/api/translate/${selectedContentId}?latestOnly=true`);
        if (resultsResponse.ok) {
          const results = await resultsResponse.json();
          setTranslationResults(results);
        }
      }
      
      alert('ÌîÑÎ°úÏ†ùÌä∏ Î≤àÏó≠Ïù¥ ÏôÑÎ£åÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('ÌîÑÎ°úÏ†ùÌä∏ Î≤àÏó≠ ÏôÑÎ£å Ïò§Î•ò:', error);
      alert('ÌîÑÎ°úÏ†ùÌä∏ Î≤àÏó≠ ÏôÑÎ£å Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setPending(false);
    }
  };

  if (loading) {
    return <div className="loading">Î°úÎî© Ï§ë...</div>;
  }

  return (
    <div className="component-placeholder">
      <h2>[Î≤àÏó≠] Î≤àÏó≠ Í¥ÄÎ¶¨</h2>
      <p>ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌïòÏó¨ Î≤àÏó≠Ìï† ÏΩòÌÖêÏ∏† Î™©Î°ùÏùÑ ÌôïÏù∏ÌïòÍ≥† ÏΩòÌÖêÏ∏†Î•º Î≤àÏó≠Ìï©ÎãàÎã§.</p> 
      
      <div className="project-selector-container">
        <label htmlFor="project-select">ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù:</label>
        <select 
          id="project-select" 
          value={selectedProjectId} 
          onChange={e => setSelectedProjectId(e.target.value)}
          disabled={projects.length === 0}
        >
          {projects.map(p => (
            <option key={p.projectId} value={p.projectId}>
              {p.projectName}
            </option>
          ))}
        </select>
      </div>

      <div className="dev-list-container">
        <div className="dev-list-header">
          <span className="header-category">ÌÉÄÏûÖ</span>
          <span className="header-task">Î≤àÏó≠ ÏΩòÌÖêÏ∏†</span>
          <span className="header-status">ÏÉÅÌÉú</span>
        </div>
        
        {isLoading ? <div className="message-container">Î°úÎî© Ï§ë...</div> : 
         error ? <div className="message-container error">{error}</div> :
         contents.length > 0 ? (
          <ul className="dev-list">
            {contents.map(content => {
              const isExpanded = expandedContentId === content.contentId;
              const translationStatus = contentTranslationStatuses[content.contentId] || 'Î≤àÏó≠ ÎåÄÍ∏∞';
              
              return (
                <React.Fragment key={content.contentId}>
                  <li
                    className="dev-list-item clickable"
                    onClick={() => toggleTranslationPanel(content.contentId)}
                  >
                    <span className="item-category">{content.type}</span>
                    <div className="item-task-group">
                      <span className="item-task-name">{content.name}</span>
                      {/* <span className="item-related-plan">
                        {content.description && `${content.description}`}
                      </span> */}
                      {/* ÌéºÏ≥êÏßÑ ÏÉÅÌÉúÏùº Îïå ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú */}
                      {isExpanded && (
                        <div className="item-details-wrapper">
                          <p className="item-details"><strong>ÏÑ§Î™Ö:</strong> {content.description || 'ÏÑ§Î™Ö ÏóÜÏùå'}</p>
                        </div>
                      )}
                    </div>
                    <span className="item-status">
                      <span className={`status-badge ${
                        translationStatus === 'Î≤àÏó≠ ÏôÑÎ£å' ? 'status-completed' :
                        translationStatus === 'Î≤àÏó≠ Ï§ë' ? 'status-in-progress' :
                        'status-waiting'
                      }`}>
                        {translationStatus}
                      </span>
                    </span>
                  </li>
                  
                  {/* ÌéºÏ≥êÏßÑ ÏÉÅÌÉúÏùº Îïå Î≤àÏó≠ Í¥ÄÎ¶¨ Ìå®ÎÑê ÌëúÏãú */}
                  {isExpanded && (
                    <div className="sub-task-container">
                      <div className="translation-management-panel">
                        <h4>Ïñ∏Ïñ¥Î≥Ñ Î≤àÏó≠ Í¥ÄÎ¶¨</h4>
                        <div className="language-grid">
                          {LANGS.map(lang => {
                            const translationItem = getTranslationItem(lang.code);
                            const status = translationItem ? translationItem.status : null;
                            
                            return (
                              <div key={lang.code} className="language-card">
                                <div className="language-header">
                                  <span className="language-flag">{lang.flag}</span>
                                  <span className="language-name">{lang.name}</span>
                                </div>
                                <div className="translation-actions">
                                  {translationItem ? (
                                    <div className="translation-status">
                                      <span className={`translation-badge ${getTranslationStatusClass(status)}`}>
                                        {getStatusText(status)}
                                      </span>
                                      <div className="translation-action-buttons">
                                        {status === 'COMPLETED' ? (
                                          <button 
                                            className="btn-review"
                                            onClick={() => openReviewModal(translationItem)}
                                          >
                                            Í≤ÄÌÜ†
                                          </button>
                                        ) : status === 'IN_PROGRESS' ? (
                                          <button 
                                            className="btn-review"
                                            onClick={() => openReviewModal(translationItem)}
                                          >
                                            ÎØ∏Î¶¨Î≥¥Í∏∞
                                          </button>
                                        ) : null}
                                        
                                        {/* {status === 'COMPLETED' && (
                                          <button 
                                            className="btn-complete"
                                            onClick={() => markComplete(translationItem.translationId)}
                                          >
                                            ÏôÑÎ£å
                                          </button>
                                        )} */}
                                      </div>
                                    </div>
                                  ) : (
                                    <button 
                                      className="btn-request-translation"
                                      onClick={() => requestTranslation(content .contentId, [lang.code])}
                                      disabled={pending}
                                    >
                                      Î≤àÏó≠ ÏöîÏ≤≠
                                    </button>
                                  )}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  )}
                </React.Fragment>
              );
            })}
          </ul>
        ) : (
          <div className="message-container">ÌëúÏãúÌï† Î≤àÏó≠ ÏΩòÌÖêÏ∏†Í∞Ä ÏóÜÏäµÎãàÎã§.</div>
        )}
      </div>
      {/* Î≤àÏó≠ Í≤ÄÌÜ† Î™®Îã¨ */}
      {isModalOpen && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Î≤àÏó≠ Í≤ÄÌÜ† ¬∑ {LANGS.find(l => l.code === modalLang)?.name || 'Ïñ∏Ïñ¥ Ï†ïÎ≥¥ ÏóÜÏùå'}</h3>
            </div>
            <div className="modal-body">
              <div className="text-comparison">
                <div className="original-text-section">
                  <h4>ÏõêÎ≥∏ ÎÇ¥Ïö©</h4>
                  <pre className="original-preview" style={{maxHeight:'200px'}}>
                    {modalOriginalText || 'ÏõêÎ≥∏ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.'}
                  </pre>
                </div>
                <div className="translated-text-section">
                  <h4>Î≤àÏó≠ ÎÇ¥Ïö©</h4>
                  <pre className="translated-preview" style={{maxHeight:'200px'}}>
                    {modalText || 'Î≤àÏó≠ Í≤∞Í≥ºÍ∞Ä ÏïÑÏßÅ ÏóÜÏäµÎãàÎã§.'}
                  </pre>
                </div>
              </div>
              <div className="modal-actions">
                <textarea
                  className="feedback-input"
                  placeholder="Î≤àÏó≠ ÏàòÏ†ï ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî (Ïû¨ÏÉùÏÑ± Ïãú ÏÇ¨Ïö©Îê©ÎãàÎã§)"
                  value={modalFeedback}
                  onChange={(e) => setModalFeedback(e.target.value)}
                  rows={5}
                />
                <button 
                  className="regen-btn" 
                  disabled={pending} 
                  onClick={regenerateTranslation}
                >
                  {pending ? 'Ïû¨ÏÉùÏÑ± Ï§ë...' : 'Ïû¨ÏÉùÏÑ±'}
                </button>
              </div>
            </div>
            <div className="modal-footer">
              <button className="close-btn" onClick={closeReviewModal}>Îã´Í∏∞</button>
              {modalTranslationId && (
                <button 
                  className="btn-edit-modal" 
                  onClick={markCompleteFromModal}
                  disabled={pending}
                >
                  {(() => {
                    // ÌòÑÏû¨ Î≤àÏó≠ ÏïÑÏù¥ÌÖúÏùò ÏÉÅÌÉú ÌôïÏù∏
                    const currentTranslation = translationResults.find(
                      item => item.translationId === modalTranslationId
                    );
                    return currentTranslation?.status === 'COMPLETED' ? 'ÏàòÏ†ï' : 'ÏôÑÎ£å';
                  })()}
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Translation;
